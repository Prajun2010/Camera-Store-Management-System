/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Infotech;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.LinkedList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Prajun
 * application for camera store
 * contains camera information
 * main UI for the camera store.
 */
public class UserMode extends javax.swing.JFrame {    
    /**
     * Creates new form UserMode
     */
    PriceSearch searching=new PriceSearch();
    private String brandSelection=null;
    public UserMode() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        brandGrp = new javax.swing.ButtonGroup();
        basePane = new javax.swing.JPanel();
        sidePane = new javax.swing.JPanel();
        searchTitle = new javax.swing.JLabel();
        searchSep = new javax.swing.JSeparator();
        brandBase = new javax.swing.JPanel();
        brandSearchLbl = new javax.swing.JLabel();
        brandCombo = new javax.swing.JComboBox<>();
        brandSearchBtn = new javax.swing.JButton();
        priceBase = new javax.swing.JPanel();
        priceSearchLbl = new javax.swing.JLabel();
        priceSearchInput = new javax.swing.JTextField();
        priceSearchBtn = new javax.swing.JButton();
        listingBase = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        headerPane = new javax.swing.JPanel();
        titleText = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        infoTitle = new javax.swing.JLabel();
        insertBase = new javax.swing.JPanel();
        insertTitle = new javax.swing.JLabel();
        prdIDLbl = new javax.swing.JLabel();
        prdIDTxtField = new javax.swing.JTextField();
        insertSep = new javax.swing.JSeparator();
        brandLbl = new javax.swing.JLabel();
        modelLbl = new javax.swing.JLabel();
        modelTxtField = new javax.swing.JTextField();
        specsLbl = new javax.swing.JLabel();
        specsTxtField = new javax.swing.JTextField();
        priceLbl = new javax.swing.JLabel();
        priceTxtField = new javax.swing.JTextField();
        addDataBtn = new javax.swing.JButton();
        addSign = new javax.swing.JLabel();
        clearDataBtn = new javax.swing.JButton();
        sonyCheck = new javax.swing.JRadioButton();
        canonCheck = new javax.swing.JRadioButton();
        nikonCheck = new javax.swing.JRadioButton();
        userMenuBar = new javax.swing.JMenuBar();
        userFileMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        exportItem = new javax.swing.JMenuItem();
        close = new javax.swing.JMenuItem();
        userHelpMenu = new javax.swing.JMenu();
        helpManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Camera Store ");
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        setIconImages(null);
        setName("userFrm"); // NOI18N
        setResizable(false);

        basePane.setBackground(new java.awt.Color(204, 204, 204));

        sidePane.setBackground(new java.awt.Color(153, 153, 153));

        searchTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        searchTitle.setForeground(new java.awt.Color(255, 255, 255));
        searchTitle.setText("Search Panel");

        searchSep.setForeground(new java.awt.Color(255, 255, 255));

        brandBase.setBackground(new java.awt.Color(204, 204, 204));
        brandBase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        brandSearchLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        brandSearchLbl.setText("Brand");

        brandCombo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        brandCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canon", "Nikon", "Sony" }));
        brandCombo.setToolTipText("");
        brandCombo.setBorder(null);
        brandCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandComboActionPerformed(evt);
            }
        });

        brandSearchBtn.setBackground(new java.awt.Color(0, 0, 0));
        brandSearchBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        brandSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        brandSearchBtn.setText("Brand Search");
        brandSearchBtn.setBorder(null);
        brandSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout brandBaseLayout = new javax.swing.GroupLayout(brandBase);
        brandBase.setLayout(brandBaseLayout);
        brandBaseLayout.setHorizontalGroup(
            brandBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brandBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(brandBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(brandCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(brandSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(brandBaseLayout.createSequentialGroup()
                        .addComponent(brandSearchLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        brandBaseLayout.setVerticalGroup(
            brandBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, brandBaseLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(brandSearchLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brandCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(brandSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        priceBase.setBackground(new java.awt.Color(204, 204, 204));
        priceBase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        priceSearchLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        priceSearchLbl.setText("Price Range");

        priceSearchInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchInputActionPerformed(evt);
            }
        });
        priceSearchInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceSearchInputKeyTyped(evt);
            }
        });

        priceSearchBtn.setBackground(new java.awt.Color(0, 0, 0));
        priceSearchBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        priceSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        priceSearchBtn.setText("Price Search");
        priceSearchBtn.setBorder(null);
        priceSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout priceBaseLayout = new javax.swing.GroupLayout(priceBase);
        priceBase.setLayout(priceBaseLayout);
        priceBaseLayout.setHorizontalGroup(
            priceBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priceBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(priceBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceSearchBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(priceSearchInput)
                    .addComponent(priceSearchLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        priceBaseLayout.setVerticalGroup(
            priceBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(priceBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(priceSearchLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceSearchInput, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priceSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        listingBase.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("        Copyrights© Camera Store 2020");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("                Powered By | TheCreationMine® ");

        javax.swing.GroupLayout listingBaseLayout = new javax.swing.GroupLayout(listingBase);
        listingBase.setLayout(listingBaseLayout);
        listingBaseLayout.setHorizontalGroup(
            listingBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listingBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listingBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        listingBaseLayout.setVerticalGroup(
            listingBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listingBaseLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout sidePaneLayout = new javax.swing.GroupLayout(sidePane);
        sidePane.setLayout(sidePaneLayout);
        sidePaneLayout.setHorizontalGroup(
            sidePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchSep)
            .addComponent(listingBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sidePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sidePaneLayout.createSequentialGroup()
                        .addComponent(searchTitle)
                        .addGap(0, 158, Short.MAX_VALUE))
                    .addComponent(brandBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sidePaneLayout.setVerticalGroup(
            sidePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchSep, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(brandBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(priceBase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(105, 105, 105)
                .addComponent(listingBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        headerPane.setBackground(new java.awt.Color(0, 0, 0));

        titleText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titleText.setForeground(new java.awt.Color(255, 255, 255));
        titleText.setText("Camera Store©");

        javax.swing.GroupLayout headerPaneLayout = new javax.swing.GroupLayout(headerPane);
        headerPane.setLayout(headerPaneLayout);
        headerPaneLayout.setHorizontalGroup(
            headerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPaneLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(titleText)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerPaneLayout.setVerticalGroup(
            headerPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headerPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleText, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                .addContainerGap())
        );

        dataTable.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"P001", "Nikon", "D850", "45.7 MP with 7fps burst shooting speed", "350000"},
                {"P002", "Canon", "5D mark iv", "30.4 MP with 4K video+Wi-Fi", "320000"},
                {"P003", "Canon", "80D", "24MP APS-C CMOS sensor with Dual Pixel AF+1080/60p video", "152000"},
                {"P004", "Nikon", "D810", "36MP - Full frame CMOS Sensor", "257000"},
                {"P005", "Nikon", "Z6", "24.5MP image sensor+4K ultra HD video+8K time lapse", "200000"},
                {"P006", "Sony", "A7r iii", "42MP+UHD 4K30p Video with HLG & S-Log3 Gammas", "370000"}
            },
            new String [] {
                "Product ID", "Brand", "Model", "Specification", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataTable.getTableHeader().setResizingAllowed(false);
        dataTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(dataTable);
        if (dataTable.getColumnModel().getColumnCount() > 0) {
            dataTable.getColumnModel().getColumn(0).setMinWidth(80);
            dataTable.getColumnModel().getColumn(0).setMaxWidth(80);
            dataTable.getColumnModel().getColumn(1).setMinWidth(80);
            dataTable.getColumnModel().getColumn(1).setMaxWidth(80);
            dataTable.getColumnModel().getColumn(2).setMinWidth(80);
            dataTable.getColumnModel().getColumn(2).setMaxWidth(80);
            dataTable.getColumnModel().getColumn(4).setMinWidth(100);
            dataTable.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        infoTitle.setFont(new java.awt.Font("Arial", 1, 28)); // NOI18N
        infoTitle.setForeground(new java.awt.Color(255, 255, 255));
        infoTitle.setText(" Information Desk");

        insertBase.setBackground(new java.awt.Color(153, 153, 153));

        insertTitle.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        insertTitle.setForeground(new java.awt.Color(255, 255, 255));
        insertTitle.setText("Insert Panel");

        prdIDLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        prdIDLbl.setForeground(new java.awt.Color(255, 255, 255));
        prdIDLbl.setText("Product ID");

        prdIDTxtField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        brandLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        brandLbl.setForeground(new java.awt.Color(255, 255, 255));
        brandLbl.setText("Brand");

        modelLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        modelLbl.setForeground(new java.awt.Color(255, 255, 255));
        modelLbl.setText("Model");

        modelTxtField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        specsLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        specsLbl.setForeground(new java.awt.Color(255, 255, 255));
        specsLbl.setText("Specification");

        specsTxtField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        priceLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        priceLbl.setForeground(new java.awt.Color(255, 255, 255));
        priceLbl.setText("Price");

        priceTxtField.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        priceTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                priceTxtFieldKeyTyped(evt);
            }
        });

        addDataBtn.setBackground(new java.awt.Color(0, 0, 0));
        addDataBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        addDataBtn.setForeground(new java.awt.Color(255, 255, 255));
        addDataBtn.setText("Add Data ");
        addDataBtn.setBorder(null);
        addDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataBtnActionPerformed(evt);
            }
        });

        addSign.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        addSign.setText("+");

        clearDataBtn.setBackground(new java.awt.Color(0, 0, 0));
        clearDataBtn.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        clearDataBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearDataBtn.setText("Clear");
        clearDataBtn.setBorder(null);
        clearDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDataBtnActionPerformed(evt);
            }
        });

        sonyCheck.setBackground(new java.awt.Color(153, 153, 153));
        brandGrp.add(sonyCheck);
        sonyCheck.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        sonyCheck.setForeground(new java.awt.Color(255, 255, 255));
        sonyCheck.setText("Sony");
        sonyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sonyCheckActionPerformed(evt);
            }
        });

        canonCheck.setBackground(new java.awt.Color(153, 153, 153));
        brandGrp.add(canonCheck);
        canonCheck.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        canonCheck.setForeground(new java.awt.Color(255, 255, 255));
        canonCheck.setText("Canon");
        canonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                canonCheckActionPerformed(evt);
            }
        });

        nikonCheck.setBackground(new java.awt.Color(153, 153, 153));
        brandGrp.add(nikonCheck);
        nikonCheck.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        nikonCheck.setForeground(new java.awt.Color(255, 255, 255));
        nikonCheck.setText("Nikon");
        nikonCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nikonCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout insertBaseLayout = new javax.swing.GroupLayout(insertBase);
        insertBase.setLayout(insertBaseLayout);
        insertBaseLayout.setHorizontalGroup(
            insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertBaseLayout.createSequentialGroup()
                        .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(insertBaseLayout.createSequentialGroup()
                                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prdIDLbl)
                                    .addComponent(brandLbl)
                                    .addComponent(modelLbl))
                                .addGap(39, 39, 39)
                                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(insertBaseLayout.createSequentialGroup()
                                        .addComponent(sonyCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(canonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(nikonCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(prdIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(modelTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(insertBaseLayout.createSequentialGroup()
                                .addComponent(priceLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(priceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertBaseLayout.createSequentialGroup()
                                .addComponent(specsLbl)
                                .addGap(18, 18, 18)
                                .addComponent(specsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addComponent(clearDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(insertBaseLayout.createSequentialGroup()
                        .addComponent(insertTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addSign)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(insertSep)
        );
        insertBaseLayout.setVerticalGroup(
            insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertBaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(insertBaseLayout.createSequentialGroup()
                        .addComponent(insertTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(addDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addSign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertSep, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prdIDLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prdIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(brandLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sonyCheck)
                    .addComponent(canonCheck)
                    .addComponent(nikonCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(modelTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(specsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(insertBaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout basePaneLayout = new javax.swing.GroupLayout(basePane);
        basePane.setLayout(basePaneLayout);
        basePaneLayout.setHorizontalGroup(
            basePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePaneLayout.createSequentialGroup()
                .addComponent(sidePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(basePaneLayout.createSequentialGroup()
                        .addGroup(basePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoTitle)
                            .addComponent(insertBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(headerPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        basePaneLayout.setVerticalGroup(
            basePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basePaneLayout.createSequentialGroup()
                .addComponent(headerPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(basePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(basePaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(insertBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        userMenuBar.setBackground(new java.awt.Color(255, 255, 255));
        userMenuBar.setBorder(null);

        userFileMenu.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Import");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        userFileMenu.add(jMenuItem1);

        exportItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exportItem.setText("Export");
        exportItem.setToolTipText("Exporting data in excel file.");
        exportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportItemActionPerformed(evt);
            }
        });
        userFileMenu.add(exportItem);

        close.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        close.setText("Close");
        close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeActionPerformed(evt);
            }
        });
        userFileMenu.add(close);

        userMenuBar.add(userFileMenu);

        userHelpMenu.setText("Help");

        helpManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        helpManual.setText("Help Desk ?");
        helpManual.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpManualMouseClicked(evt);
            }
        });
        helpManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpManualActionPerformed(evt);
            }
        });
        userHelpMenu.add(helpManual);

        userMenuBar.add(userHelpMenu);

        setJMenuBar(userMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(basePane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exportItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportItemActionPerformed
        exporting();// calling exporting method.
    }//GEN-LAST:event_exportItemActionPerformed

    private void closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeActionPerformed
        System.exit(0);// for closing program.
    }//GEN-LAST:event_closeActionPerformed

    private void priceSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchBtnActionPerformed
        searchByPrice();// calling searchByPrice method to search brand info according to price.
    }//GEN-LAST:event_priceSearchBtnActionPerformed

    private void brandSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandSearchBtnActionPerformed
        cameraBrandSearch(); // calling cameraBrandSearch method to search camera brand.
    }//GEN-LAST:event_brandSearchBtnActionPerformed

    private void addDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataBtnActionPerformed
        userInput();// calling userInput method for adding data to table.
    }//GEN-LAST:event_addDataBtnActionPerformed

    private void clearDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDataBtnActionPerformed
        //clear all the inserted data from insert panel
        prdIDTxtField.setText("");
        modelTxtField.setText("");
        specsTxtField.setText("");
        priceTxtField.setText("");
        brandSelection="";
    }//GEN-LAST:event_clearDataBtnActionPerformed

    private void priceTxtFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceTxtFieldKeyTyped
        //enable only number input
        char insertedChar=evt.getKeyChar();
        if(!(Character.isDigit(insertedChar))){
            evt.consume();
        }
    }//GEN-LAST:event_priceTxtFieldKeyTyped

    private void priceSearchInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_priceSearchInputKeyTyped
        //enable only number input
        char insertChar=evt.getKeyChar();
        if(!(Character.isDigit(insertChar))){
            evt.consume();
        }
    }//GEN-LAST:event_priceSearchInputKeyTyped

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        importing();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void brandComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandComboActionPerformed

    private void priceSearchInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceSearchInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceSearchInputActionPerformed

    private void sonyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sonyCheckActionPerformed
        if(sonyCheck.isSelected()){
            brandSelection=sonyCheck.getText();
        }
    }//GEN-LAST:event_sonyCheckActionPerformed

    private void canonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_canonCheckActionPerformed
        if(canonCheck.isSelected()){
            brandSelection=canonCheck.getText();
        }
    }//GEN-LAST:event_canonCheckActionPerformed

    private void nikonCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nikonCheckActionPerformed
        if(nikonCheck.isSelected()){
            brandSelection=nikonCheck.getText();
        }
    }//GEN-LAST:event_nikonCheckActionPerformed

    private void helpManualMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpManualMouseClicked

    }//GEN-LAST:event_helpManualMouseClicked

    private void helpManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpManualActionPerformed
        HelpDesk call=new HelpDesk(); // creating object for HelpDesk class.
        call.setVisible(true); 
    }//GEN-LAST:event_helpManualActionPerformed
    private void userInput(){ // for checking and retrieving data from insert panel.
        String prdId=prdIDTxtField.getText().toUpperCase();
        String model=modelTxtField.getText();
        String specs=specsTxtField.getText();
        String price=priceTxtField.getText();
        String brand=brandSelection;
        
        if(!prdId.isEmpty() && !model.isEmpty() && !specs.isEmpty() && !price.isEmpty() && brand!=null){// checking empty value
            int rowCount=dataTable.getRowCount(); // no of rows
            String idCheck="";
            String modelCheck="";
            for(int rowNumber=0;rowNumber<rowCount;rowNumber++){
                idCheck=(String)dataTable.getValueAt(rowNumber,0); // checking product id
                modelCheck=(String)dataTable.getValueAt(rowNumber,2); // checking model
                if(idCheck.equals(prdId) || modelCheck.equals(model))
                    break; // break the condition-> if satisy any of the condition.
            }    
            if(idCheck.equals(prdId)|| modelCheck.equals(model)){ 
                JOptionPane.showMessageDialog(basePane,"Value already contained!","Info",JOptionPane.INFORMATION_MESSAGE);
            }else{
                if(Integer.parseInt(price)<=0 || Integer.parseInt(price)<20000){ // checking price below 20000
                    JOptionPane.showMessageDialog(basePane,"Please set the required price!","Info",JOptionPane.INFORMATION_MESSAGE);
                }else{
                    DefaultTableModel insertData=(DefaultTableModel)dataTable.getModel();
                    insertData.addRow(new Object[]{prdId,brand,model,specs,price});
                    JOptionPane.showMessageDialog(basePane,"Data Inserted Successfully!","Notice!",JOptionPane.INFORMATION_MESSAGE);                }
            }
        }else{
            JOptionPane.showMessageDialog(basePane,"Value Missing!","Error!",JOptionPane.ERROR_MESSAGE);
        }
    }
    private void importing(){// method to export data from the csv file 
        JFileChooser fileChoose=new JFileChooser();
        fileChoose.setCurrentDirectory(new File(System.getProperty("user.home"))); // getting user home directory
        int confirmation=fileChoose.showOpenDialog(null);
        if(confirmation==JFileChooser.APPROVE_OPTION){
            File selectedFile = fileChoose.getSelectedFile();
            int count=0; // no.of data inserted
            if(selectedFile.getName().endsWith("csv")){ // checking for csv extension
                try {
                    FileReader filereader = new FileReader(selectedFile);
                    BufferedReader bufferedreader = new BufferedReader(filereader);

                    DefaultTableModel appendModel = (DefaultTableModel) dataTable.getModel();
                    Object[] lineStore = bufferedreader.lines().toArray();

                    for (int i = 0; i < lineStore.length; i++) {
    //                    System.out.println(lineStore[i]);for testing
                        String[] lineList = lineStore[i].toString().replaceAll("\"", "").split(",");
                        String idStore="";
                        /* to check the id to add in the table */
                        for(int j=0;j<lineList.length;j++){
    //                        System.out.println(list[j]); for testing
                            if (",".equals(lineList[j])){ // breaks when move to (,) after id.
                                break;
                            }else{
                                idStore=idStore+lineList[j];
                                break;
                            }
                        }
                        System.out.println(idStore);
                        int rowCount=dataTable.getRowCount();
                        String dataTableId = ""; // stores data table product id
                        for(int k=0;k<rowCount;k++){ 
                            dataTableId=(String) dataTable.getValueAt(k,0).toString();
                            if(dataTableId.equals(idStore)){
                                break;
                            }
                        }
                        if(dataTableId.equals(idStore)){ // checking for id
                                count+=1;
                        }else{
                            appendModel.addRow(lineList); // appending data to the table.
                        }
                    }
                    if (count!=0){
                        JOptionPane.showMessageDialog(basePane,count + " records already contained in the table.","Warning!",JOptionPane.WARNING_MESSAGE);
                    }else{
                        JOptionPane.showMessageDialog(basePane,"Data imported Successfully!","Notice",JOptionPane.INFORMATION_MESSAGE);
                    }
                }catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(basePane,"Error Occured!");
                }  
            }else{
                JOptionPane.showMessageDialog(basePane,"Only csv file is accepted!","Notice",JOptionPane.INFORMATION_MESSAGE);
            }
        }
             
    }
       
    private void exporting(){ // method for exporting jTable data into excel file.
        try{
            JFileChooser exportExcel = new JFileChooser(); // path for exporting excel file
            int confirmation = exportExcel.showSaveDialog(null);
            if(confirmation == JFileChooser.APPROVE_OPTION){
                String Filename = exportExcel.getSelectedFile().getName(); 
                String directoryPath = exportExcel.getSelectedFile().getParentFile().getPath(); // getting directorypath to save.
                String filePath = directoryPath + "\\" + Filename + ".csv"; // csv extions is used. 
                TableModel modelTable = dataTable.getModel();
                FileWriter excelFile = new FileWriter(filePath);
                excelFile.write("Product ID,Brand,Model,Specification,Price");
                excelFile.write("\n");
                for(int i=0; i< modelTable.getRowCount(); i++){
                    for(int j=0; j < modelTable.getColumnCount(); j++){
                        excelFile.write(modelTable.getValueAt(i,j).toString()+",");// fetching jtable data to excel file.
                    }
                    excelFile.write("\n");
                }
                JOptionPane.showMessageDialog(basePane,"Exported Successfully!","Notice",JOptionPane.INFORMATION_MESSAGE);
                excelFile.close();//for closing file.
            }
        }catch(IOException e){ 
          JOptionPane.showMessageDialog(basePane,"Error occured!","Error!",JOptionPane.ERROR_MESSAGE); 
        }
    }
    
    private void cameraBrandSearch(){ // implementing linear search method
        Display disp=new Display(); // Display class call
        String cameraBrand=(String)brandCombo.getSelectedItem();
        
        DefaultTableModel cameraModel=(DefaultTableModel)dataTable.getModel();
        DefaultTableModel dispModel=(DefaultTableModel)disp.displayTable.getModel();
        
        int rowCount=cameraModel.getRowCount();
        int colCount=cameraModel.getColumnCount();
        
        Object[][] cameraTable=new Object[rowCount][colCount];
        
        for(int i=0;i<rowCount;i++){
            for(int j=0;j<colCount;j++){
                cameraTable[i][j]=cameraModel.getValueAt(i,j);
            }
        }
        // for couting  number of results found
        int counter=0;
        for(int i=0;i<rowCount;i++){
            String holdValue=(String)dataTable.getValueAt(i,1);
            if(holdValue.equals(cameraBrand)){
                counter+=1;
            }
        }
        JOptionPane.showMessageDialog(basePane,counter +" Results found.","Result",JOptionPane.INFORMATION_MESSAGE);
        
        for(int i=0;i<cameraTable.length;i++){
            String val=(String)cameraTable[i][1];
            if(val.equals(cameraBrand)){
                dispModel.addRow(cameraTable[i]);
            }
        }
        if(counter!=0){ // enable only if data consists.
            disp.setVisible(true);
        }
    }
       
    private void searchByPrice(){// implementing binary search and selection sort
        if(!priceSearchInput.getText().isEmpty()){
            try{
            LinkedList<Integer> price = new LinkedList<>();
            int a = dataTable.getRowCount(); // no. of row counts 
            for (int i=0;i<a;i++){
                int amount = Integer.parseInt(dataTable.getValueAt(i,4).toString());
                price.add(amount);// adding amount in price likedlist    
            }
            
            /*appying selection sort */
            int count = price.size(); 
            for (int i = 0; i < count-1; i++){ 
                int minPosition = i;// assinging for minimum postion->0 
                for (int j = i+1; j < count; j++){ 
                    if (price.get(j) < price.get(minPosition)) 
                        minPosition = j;
                    int temprory = price.get(minPosition);
                    price.set(minPosition, price.get(i)); 
                    price.set(i, temprory);
               }
            }
            
            /*for binary search*/
            int value = Integer.parseInt(priceSearchInput.getText());
            int low = 0;
            int high = price.size()-1;
            int valueHold = searching.binaryPrice(price,low,high,value); // calling binaryPrice method from priceSearch class

    //        System.out.println(low); // for testing
    //        System.out.println(high);
    //        System.out.println(value);
    //        System.out.println(price);
             if (valueHold==-1){
                    JOptionPane.showMessageDialog(basePane, "Data not available!","Notice",JOptionPane.INFORMATION_MESSAGE);
                }else{
                    String searchedPrice=priceSearchInput.getText();
                    for (int i=0; i<dataTable.getRowCount();i++){
                        String dataPrice=dataTable.getValueAt(i,4).toString();
                        if(dataPrice.equals(searchedPrice)){
                            JOptionPane.showMessageDialog(basePane,
                                "Product ID: "+dataTable.getValueAt(i,0).toString()+
                                " \n Brand: "+dataTable.getValueAt(i,1).toString()+
                                "\n Model: "+ dataTable.getValueAt(i,2).toString()+
                                "\n Specs: "+ dataTable.getValueAt(i,3).toString()+
                                "\n Price: "+dataTable.getValueAt(i,4).toString(),
                                "Search Result",JOptionPane.INFORMATION_MESSAGE);
                            break;
                        }
                    }
                }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(basePane,"No information Available!","Notice",JOptionPane.INFORMATION_MESSAGE);
        }
        }else{
            JOptionPane.showMessageDialog(basePane,"Please enter the value to search!","Notice",JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserMode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDataBtn;
    private javax.swing.JLabel addSign;
    private javax.swing.JPanel basePane;
    private javax.swing.JPanel brandBase;
    private javax.swing.JComboBox<String> brandCombo;
    private javax.swing.ButtonGroup brandGrp;
    private javax.swing.JLabel brandLbl;
    private javax.swing.JButton brandSearchBtn;
    private javax.swing.JLabel brandSearchLbl;
    private javax.swing.JRadioButton canonCheck;
    private javax.swing.JButton clearDataBtn;
    private javax.swing.JMenuItem close;
    private javax.swing.JTable dataTable;
    private javax.swing.JMenuItem exportItem;
    private javax.swing.JPanel headerPane;
    private javax.swing.JMenuItem helpManual;
    private javax.swing.JLabel infoTitle;
    private javax.swing.JPanel insertBase;
    private javax.swing.JSeparator insertSep;
    private javax.swing.JLabel insertTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel listingBase;
    private javax.swing.JLabel modelLbl;
    private javax.swing.JTextField modelTxtField;
    private javax.swing.JRadioButton nikonCheck;
    private javax.swing.JLabel prdIDLbl;
    private javax.swing.JTextField prdIDTxtField;
    private javax.swing.JPanel priceBase;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JButton priceSearchBtn;
    private javax.swing.JTextField priceSearchInput;
    private javax.swing.JLabel priceSearchLbl;
    private javax.swing.JTextField priceTxtField;
    private javax.swing.JSeparator searchSep;
    private javax.swing.JLabel searchTitle;
    private javax.swing.JPanel sidePane;
    private javax.swing.JRadioButton sonyCheck;
    private javax.swing.JLabel specsLbl;
    private javax.swing.JTextField specsTxtField;
    private javax.swing.JLabel titleText;
    private javax.swing.JMenu userFileMenu;
    private javax.swing.JMenu userHelpMenu;
    private javax.swing.JMenuBar userMenuBar;
    // End of variables declaration//GEN-END:variables

}
